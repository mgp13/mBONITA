transcriptomics = read.csv("bonita_transcriptomics.csv", row.names=1)
proteomics = read.csv("bonita_proteomics.csv", row.names=1)
phosphoproteomics = read.csv("bonita_phosphoproteomics.csv", row.names=1)
require(reshape2)
transMelt = melt(transcriptomics)
install.packages('Rcpp')
library(Rcpp)
install.packages('Rcpp')
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
require(reshape2)
transcriptomics = read.csv("bonita_transcriptomics.csv", row.names=1)
proteomics = read.csv("bonita_proteomics.csv", row.names=1)
phosphoproteomics = read.csv("bonita_phosphoproteomics.csv", row.names=1)
transMelt = melt(transcriptomics)
head(transMelt)
head(transcriptomics)
transcriptomics = read.csv("bonita_transcriptomics.csv")
proteomics = read.csv("bonita_proteomics.csv", row.names=1)
phosphoproteomics = read.csv("bonita_phosphoproteomics.csv", row.names=1)
head(transcriptomics)
transMelt = melt(transcriptomics, id.vars = 'X')
head(transMelt)
head(proteomics)
transcriptomics = read.csv("bonita_transcriptomics.csv")
proteomics = read.csv("bonita_proteomics.csv")
phosphoproteomics = read.csv("bonita_phosphoproteomics.csv")
head(phosphoproteomics)
transMelt = melt(transcriptomics, id.vars = 'X')
head(transMelt)
protMelt = melt(proteomics, id.vars = 'X')
head(protMelt)
phosphMelt = melt(phosphoproteomics, id.vars = 'X')
head(phosphMelt)
?concat
?append
head(concatMelt)
transMelt = melt(transcriptomics, id.vars = 'X')
head(transMelt)
protMelt = melt(proteomics, id.vars = 'X')
head(protMelt)
phosphMelt = melt(phosphoproteomics, id.vars = 'X')
head(phosphMelt)
concatMelt = rbind(transMelt, protMelt, phosphMelt)
head(concatMelt)
transMelt = melt(transcriptomics, id.vars = 'X')
transMelt$View = "Transcriptomics"
head(transMelt)
protMelt = melt(proteomics, id.vars = 'X')
protMelt$View = "Proteomics"
head(protMelt)
phosphMelt = melt(phosphoproteomics, id.vars = 'X')
phosphMelt$View = "Phosphoproteomics"
head(phosphMelt)
concatMelt = rbind(transMelt, protMelt, phosphMelt)
colnames(concatMelt) = c("Gene", "Sample", "Value", "View")
head(concatMelt)
conditions = read.csv("concatenated_conditions.csv")
head(conditions)
transMelt = melt(transcriptomics, id.vars = 'X')
transMelt$View = "Transcriptomics"
head(transMelt)
protMelt = melt(proteomics, id.vars = 'X')
protMelt$View = "Proteomics"
head(protMelt)
phosphMelt = melt(phosphoproteomics, id.vars = 'X')
phosphMelt$View = "Phosphoproteomics"
head(phosphMelt)
concatMelt = rbind(transMelt, protMelt, phosphMelt)
colnames(concatMelt) = c("feature", "sampleID", "Value", "View")
head(concatMelt)
conditions = read.csv("concatenated_conditions.csv")
head(conditions)
concatMelt$SampleID %in% conditions$variable
concatMelt$SampleID
concatMelt$sampleID
levels(concatMelt$sampleID) %in% conditions$variable
levels(concatMelt$sampleID)[levels(concatMelt$sampleID) !%in% conditions$variable]
levels(concatMelt$sampleID)[levels(concatMelt$sampleID) ! %in% conditions$variable]
levels(concatMelt$sampleID)[!levels(concatMelt$sampleID) %in% conditions$variable]
levels(conditions$variable)
unique(conditions$variable)
levels(concatMelt$sampleID)[!levels(concatMelt$sampleID) %in% conditions$variable]
unique(conditions$variable)
levels(concatMelt$sampleID)[!make.names(levels(concatMelt$sampleID)) %in% conditions$variable]
make.names(levels(concatMelt$sampleID)) %in% conditions$variable
make.names(levels(concatMelt$sampleID))
conditions$variable
levels(concatMelt$sampleID)[!make.names(levels(concatMelt$sampleID)) %in% make.names(conditions$variable)]
make.names(levels(concatMelt$sampleID))
make.names(conditions$variable)
make.names(conditions$variable) %in%
kjdlf
make.names(levels(concatMelt$sampleID)) %in% make.names(conditions$variable)
conditions = read.csv("concatenated_conditions.csv")
conditions$variable = make.names(conditions$variable)
head(conditions)
concatMelt$sample = unlist(lapply(concatMelt$sample, function(x){conditions$variable[conditions$variable == x]}))
concatMelt$sample = unlist(lapply(concatMelt$sample, function(x){conditions$variable[conditions$variable == x]}))
concatMelt$sample
concatMelt$sample = unlist(lapply(concatMelt$sample, function(x){conditions$Condition[conditions$variable == x]}))
MOFAobject <- create_mofa(CLL_data)
require(MOFA2)
MOFAobject <- create_mofa(CLL_data)
install.packages("pillar")
