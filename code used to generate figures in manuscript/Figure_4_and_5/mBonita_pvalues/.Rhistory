temp <-
na.omit(nodeData_HIF[nodeData_HIF$Network == network &
nodeData_HIF$Contrast == contrast, c('Display.Name', 'Contrast', 'modScore', 'Dataset')]) #B cell receptor signaling pathway
temp <-
reshape2::acast(temp, Display.Name ~ Dataset, value.var = 'modScore')
temp[is.na(temp)] <- 0
temp <- as.matrix(t(temp))
head(temp)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <-
Heatmap(
scale(temp),
na_col = "lightgrey",
cluster_columns = TRUE,
cluster_rows = FALSE,
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 90,
column_title = paste0('Genes in ', network),
row_title = contrast,
column_title_side = "bottom",
row_order = c(
"Combined",
"Transcriptomics",
"Proteomics",
"Phosphoproteomics"
),
border = TRUE,
heatmap_legend_param = list(
direction = "vertical",
title = "Node Modulation Score",
title_position = "leftcenter-rot",
legend_height = unit(3, 'in')
),
column_names_gp = gpar(fontsize = 10)
)
png(
paste0("Heatmap_", make.names(contrast), "_", network, ".png"),
width = 12,
height = 4,
units = "in",
res = 600
)
draw(h1, heatmap_legend_side = "left")
dev.off()
}
network = "hsa04662"
nodeData_HIF$Dataset <- as.factor(nodeData_HIF$Dataset)
levels(nodeData_HIF$Dataset) <- c("Proteomics", "Combined", "Transcriptomics", "Phosphoproteomics")
for (contrast in unique(nodeData_HIF$Contrast)){
makeNodeModeHeatmaps(nodeData_HIF, network, contrast)
}
require(ComplexHeatmap)
require(circlize)
temp <-
na.omit(nodeData_HIF[nodeData_HIF$Network == network, c('Display.Name', 'Contrast', 'modScore', 'Dataset')]) #B cell receptor signaling pathway
temp$Contrast <- as.factor(temp$Contrast)
levels(temp$Contrast) <-
gsub("\\-\\-", "- \u2014\n", levels(temp$Contrast))
levels(temp$Contrast) <-
gsub("\\+\\-", "+ \u2014\n", levels(temp$Contrast))
temp$DatasetContrast <-
paste(temp$Dataset, temp$Contrast, sep = "_")
temp <-
reshape2::acast(temp, Display.Name ~ DatasetContrast, value.var = 'modScore')
temp[is.na(temp)] <- 0
temp <- as.matrix(t(temp))
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <-
Heatmap(
scale(temp),
na_col = "lightgrey",
cluster_columns = TRUE,
cluster_rows = FALSE,
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes in ', network),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Scaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10),
row_order = order(
gsub(
"Combined_|Proteomics_|Transcriptomics_|Phosphoproteomics_",
"",
rownames(temp)
)
),
row_labels = gsub("\\_.*", "", rownames(temp)),
row_split = gsub(
"Combined_|Proteomics_|Transcriptomics_|Phosphoproteomics_",
"",
rownames(temp)
),
row_title_gp = gpar(fontsize = 10), row_gap = unit(2, "mm")
)
png(
paste0("Heatmap_", "allContrasts_", network, ".png"),
width = 12,
height = 4,
units = "in",
res = 600
)
draw(h1, heatmap_legend_side = "top")
dev.off()
draw(h1, heatmap_legend_side = "top")
order(gsub("Combined_|Proteomics_|Transcriptomics_|Phosphoproteomics_", "", rownames(temp)))
metaNet_scores = read.csv("nodeModulation.csv", row.names = 1)
metaNet_scores$Contrast = gsub("_vs_", "\nvs\n", metaNet_scores$Contrast)
head(metaNet_scores)
temp2 = aggregate(nodeModulation ~ index, metaNet_scores, sd)
colnames(temp2) <- c("index", "nodeModulation_sd")
temp2 <- temp2[order(temp2$nodeModulation, decreasing = TRUE),]
head(temp2)
highSD_genes = temp2$index[1:100]
temp = t(reshape2::acast(metaNet_scores, index ~ Contrast, value.var = 'nodeModulation'))
temp = temp[,temp2$index[1:50]]
knitr::kable(head(temp))
require(ComplexHeatmap)
require(circlize)
f2 = colorRamp2(seq(-1, 1, length = 3), c("blue", "white", "red"), space = "RGB")
h1 <- Heatmap(scale(temp),
col = f2,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes with highly variable node modulation scores'),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Scaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10))
png(
"LSP1network.png",
width = 8,
height = 5,
units = "in",
res = 1200
)
draw(h1, heatmap_legend_side = "top")
dev.off()
draw(h1, heatmap_legend_side = "top")
require(ComplexHeatmap)
require(circlize)
f3 = colorRamp2(seq(min(temp), max(temp), length = 3), c("blue", "white", "red"), space = "RGB")
h1 <- Heatmap(temp,
col = f3,
rect_gp = gpar(col = "lightgrey", lwd = 2),
column_title_rot = 0,
row_title_rot = 0,
column_title = paste0('Genes with highly variable node modulation scores'),
column_title_side = "bottom",
border = TRUE,
heatmap_legend_param = list(
direction = "horizontal",
title = "Unscaled Node Modulation Score",
title_position = "topcenter",
legend_width = unit(5, 'in'),
border = 'black'
),
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10))
png(
"LSP1network_unscaled.png",
width = 8,
height = 5,
units = "in",
res = 1200
)
draw(h1, heatmap_legend_side = "top")
dev.off()
draw(h1, heatmap_legend_side = "top")
head(temp)
head(scale(temp))
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
require(UpSetR)
require(ggplot2)
require(ggsci)
require(ggpubr)
require(reshape2)
require(metap)
require(GGally)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
ggpairs(medianDF)
head(medianDF)
melt(medianDF)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
melt(medianDF)
ggpairs(medianDF, id.vars = "Gene")
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
melt(medianDF, id.vars = "Gene")
#ggpairs(medianDF)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
melt(medianDF, id.vars = c("Gene", "Condition"))
#ggpairs(medianDF)
head(medianDF)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF[,c("Transcriptomics", "Proteomics", "Phosphoproteomics")])
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"))
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = "Contrast"))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Contrast))
head(medianDF)
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = "Condition"))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_pubr()
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw()
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_pubr() + theme(panel.grid.minor = element_line(color = 2, size = 0.25, linetype = 1)
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_pubr() + theme(panel.grid.minor = element_line(color = 2, size = 0.25, linetype = 1))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_pubr() + theme(panel.grid.minor = element_line(color = 'lightgrey', size = 0.25, linetype = 1))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_pubr() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 1))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 1))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = "Condition")) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2))
#melt(medianDF, id.vars = c("Gene", "Condition"))
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics")) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer() # aes(color = Condition)
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = 'blue')) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer() # aes(color = Condition)
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics")) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer() # aes(color = Condition)
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), color = 'blue') + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) # aes(color = Condition)
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), fill = 'blue') + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) # aes(color = Condition)
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics")) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_manual() # aes(color = Condition)
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer() #
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer() + scale_fill_brewer()
cent'
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer('Accent') + scale_fill_brewer()
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer(Accent) + scale_fill_brewer()
?scale_color_brewer
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer(palette = 'Accent') + scale_fill_brewer()
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 20)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
?ggsave
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 20)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 4, width = 8)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 4, width = 8)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 20)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 5, width = 8)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 5, width = 8)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 4, width = 8)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 4, width = 8)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 3, width = 8)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 3, width = 8)
?ggpairs
p1 = ggpairs(medianDF, showStrips = FALSE, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
p1
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 3, width = 8)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 3, width = 8)
?theme_pubr
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_pubr(legend = "bottom") + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 3, width = 8)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 3, width = 8)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_pubr(legend = "bottom") + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 4)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 4)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_pubr(legend = "bottom") + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 5)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 5)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 5)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 5)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 12)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 6)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 6)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 6)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 6)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
p1 = ggpairs(medianDF, columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, shape = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 6)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 6, dpi = 600)
require(UpSetR)
require(ggplot2)
require(ggsci)
require(ggpubr)
require(reshape2)
require(metap)
require(GGally)
require(ggplotify)
require(ComplexHeatmap)
medianDF = read.csv("medianDF.csv", row.names = 1)
head(medianDF)
# add regression lines - https://www.r-bloggers.com/2016/02/multiple-regression-lines-in-ggpairs/
addRegressionLines <- function(data, mapping){
p <- ggplot(data=data, mapping=mapping) + geom_point() + geom_smooth(method=lm)
return(p)
}
p1 = ggpairs(medianDF, lower = list(continuous = addRegressionLines), columns = c("Transcriptomics", "Proteomics", "Phosphoproteomics"), aes(color = Condition, fill = Condition, shape = Condition)) + theme_bw() + theme(panel.grid.minor = element_line(color = 'grey', size = 0.25, linetype = 2), text = element_text(size = 16)) + scale_color_brewer(palette = 'Dark2') + scale_fill_brewer(palette = 'Dark2')
ggsave("correlation_between_datasets.svg", plot = p1, device = "svg", height = 6, width = 6)
ggsave("correlation_between_datasets.png", plot = p1, device = "png", height = 6, width = 6, dpi = 1200)
ggsave("correlation_between_datasets.pdf", plot = p1, device = "pdf", height = 6, width = 6, dpi = 1200)
print(p1)
reshapePvals <- function(mBonita_PA) {
allPA <-
reshape2::melt(
mBonita_PA,
id.vars = c("Pathway", "Method"),
measure.vars =  c(
"X1O2PlusCyA - X1O2NoCyA",
"X1O2NoCyA - X19O2NoCyA",
"X19O2NoCyA - X1O2PlusCyA"
)
colnames(allPA) <-
c("Pathway", "Method", "Contrast", "negativelog10pvalue")
allPA$pvalue <- 10 ^ (-1 * allPA$negativelog10pvalue)
allPA$FDR <- p.adjust(allPA$pvalue, method = "BH")
allPA$negativelog10FDR <- (-1)*log10(allPA$FDR)
temp <- allPA$pvalue < 0.05
allPA <- allPA[temp,]
return(allPA)
}
#concat_PA <- read.csv("pvalues_concatenated_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
#concat_PA$Method <- "Concatenated"
#concat_PA <- reshapePvals(concat_PA)
prot_PA <- read.csv("pvalues_proteomics_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
prot_PA$Method <- "Proteomics"
prot_PA <- reshapePvals(prot_PA)
trans_PA <- read.csv("pvalues_transcriptomics_20221007.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE) #read.csv("pvalues_transcriptomics_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
trans_PA$Method <- "Transcriptomics"
trans_PA <- reshapePvals(trans_PA)
phosph_PA <- read.csv("pvalues_phosphoproteomics_20220816.csv", row.names = 1, col.names= c("Pathway", "Code", "Nodes", "X1O2PlusCyA - X1O2NoCyA", "X1O2NoCyA - X19O2NoCyA", "X19O2NoCyA - X1O2PlusCyA"), check.names = FALSE)
phosph_PA$Method <- "Phosphoproteomics"
phosph_PA <- reshapePvals(phosph_PA)
Bonita_PA <- rbind(prot_PA, trans_PA, phosph_PA)
temp <- as.data.frame(reshape2::acast(data = Bonita_PA, Contrast ~ Pathway , value.var = 'FDR', fun.aggregate = function(x){return(metap::sumz(x)$p)}))
temp <- as.data.frame(reshape2::melt(as.matrix(temp)))
temp$Method <- "Combined"
colnames(temp) <- c("Contrast", "Pathway", "FDR", "Method")
temp$negativelog10FDR <- (-1)*log10(temp$FDR)
hist(temp$FDR)
concat_PA <- temp
Bonita_PA <- na.omit(rbind(prot_PA[,colnames(temp)], trans_PA[,colnames(temp)], phosph_PA[,colnames(temp)], temp))
write.csv(Bonita_PA, "Bonita_allResults_20221010.csv")
temp <- Bonita_PA$FDR < 0.05
Bonita_PA <- Bonita_PA[temp,]
ggplot(trans_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_trans_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_trans_allResults.png', width = 12, height =24, units = 'in')
ggplot(prot_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_prot_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_prot_allResults.png', width = 12, height =24, units = 'in')
ggplot(phosph_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_phosph_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_phosph_allResults.png', width = 12, height =24, units = 'in')
ggplot(concat_PA) + geom_point(aes(x=negativelog10FDR, y=Pathway, color=Contrast)) + facet_wrap(facets = 'Method', drop=TRUE) + theme_bw()
ggsave(filename = "Bonita_combined_pvals_allResults.svg", width = 12, height = 24, units = 'in')
ggsave(filename = 'Bonita_combined_pvals_allResults.png', width = 12, height =24, units = 'in')
PAvals <- read.csv("pvalues_concatenated_20221010.csv")
PAvals$BHpvals <- p.adjust(PAvals$P.value)
hist(PAvals$BHpvals)
#PAvals <- PAvals[PAvals$BHpvals < 0.05,]
PAvals$negativeLog10_adjpvals <- (-1)*log10(PAvals$BHpvals)
#PAvals <- na.omit(PAvals)
head(PAvals)
write.csv(PAvals, "mBonita_pvalues.csv")
hist(PAvals$BHpvals)
require(ggplot2)
require(ggpubr)
ggplot(PAvals) + geom_point(aes(x=negativeLog10_adjpvals, y=Pathway.Name, color=Contrast)) + theme_bw() + facet_wrap('Contrast') + xlab("-log10 (BH-corrected P value)") + ylab("Pathway Name") + xlim(0, max(PAvals$negativeLog10_adjpvals)) + theme_pubr()
require(reshape2)
PAvals <- reshape2::melt(reshape2::acast(PAvals, Pathway.Name ~ Contrast, value.var = 'BHpvals'))
#reshape2::melt(reshape2::acast(PAvals, Pathway.Name ~ Contrast, value.var = 'negativeLog10_adjpvals'))
PAvals[is.na(PAvals)] <- 0
PAvals$negativeLog10_adjpvals = (-1)*log10(PAvals$value)
colnames(PAvals) <- c("Pathway Name", "Contrast", "BHpvals", "negativeLog10_adjpvals")
PAvals$Method <- 'mBONITA'
unique(Bonita_PA$Method)
PAvals$Significant <- as.factor(unlist(lapply(PAvals$BHpvals, function(x){if(x>0.05){return(FALSE)}else{return(TRUE)}})))
PAvals$Contrast2 <- gsub(" vs ", "\nvs\n", PAvals$Contrast)
p1 <- ggplot(PAvals, aes(Contrast2, `Pathway Name`, fill=Significant)) + geom_tile(color = 'black', size = 0.3) + scale_x_discrete(position = "top") + theme_pubr(base_size = 16) + rotate_x_text(0) + scale_fill_brewer() + xlab("")
png(
"mBONITA_pvalues.png",
width = 12,
height = 12,
units = "in",
res = 600
)
p1
dev.off()
svg(
"mBONITA_pvalues.svg",
width = 12,
height = 12
)
p1
dev.off()
visList <- vector(mode = "list", length = length(unique(PAvals$Contrast)))
names(visList) <- unique(PAvals$Contrast)
for (n in unique(PAvals$Contrast)){
visList[[n]] <- na.omit(PAvals[PAvals$Contrast %in% c(n), ])
visList[[n]] <- as.vector(visList[[n]][visList[[n]]$BHpvals < 0.05, "Pathway Name"])
}
names(visList) <- gsub(" vs ", "\nvs ", names(visList))
#names(visList) <- gsub("O2", "O_2", names(visList))
p1 = upset(fromList(visList), order.by = c("freq", "degree"), mb.ratio = c(0.6, 0.4), empty.intersections = NULL, point.size = 5, line.size = 1 , mainbar.y.label = "Intersections", sets.x.label = "Pathways", text.scale = c(2,2, 2, 2, 1.5, 2), number.angles = 0, main.bar.color = 'black', sets.bar.color = 'black', shade.color = 'white', matrix.color = 'black')
png(filename = paste0('upset','_mBonita_','allContrasts.png'), width = 10, height = 5, pointsize = 14, res = 600, units = 'in')
print(p1)
dev.off()
upset_mBonita_allContrasts = as.grob(p1, margin=0)
gplots::venn(visList)
require(ComplexHeatmap)
lt = make_comb_mat(list_to_matrix(visList))
p1 = UpSet(lt, pt_size = unit(5, "mm"), right_annotation = upset_right_annotation(lt, add_numbers = TRUE, numbers_rot = 0,numbers_gp = gpar(cex=1)),  top_annotation = upset_top_annotation(lt, add_numbers = TRUE, numbers_rot = 0,numbers_gp = gpar(cex=1)))
upset_mBonita_allContrasts = as.grob(p1)
p1
as.data.frame(visList)
PAvals
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(tempPAvals$BHpvals),]
print(contrast, temp_PAvals[1:5,])
}
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(temp_PAvals$BHpvals),]
print(contrast, temp_PAvals[1:5,"Pathway.Name"])
}
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(temp_PAvals$BHpvals),]
print(contrast, temp_PAvals[1:5,])
}
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(temp_PAvals$BHpvals),]
print(contrast)
print(temp_PAvals[1:5,])
}
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(temp_PAvals$BHpvals),]
print(contrast)
print(temp_PAvals[1:10,])
}
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(temp_PAvals$BHpvals),]
print(contrast)
print(temp_PAvals[1:15,])
}
for (contrast in unique(PAvals$Contrast)){
temp_PAvals = PAvals[PAvals$Contrast == contrast,]
temp_PAvals = temp_PAvals[order(temp_PAvals$BHpvals),]
print(contrast)
print(temp_PAvals[1:15,])
}
